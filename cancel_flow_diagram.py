"""
server_task.cancel() 프로세스 플로우 다이어그램
"""


def print_cancel_flow_diagram():
    """취소 프로세스의 시각적 다이어그램"""

    print(
        """
    [CANCEL FLOW] server_task.cancel() 프로세스 플로우
    
    ┌─────────────────────────────────────────────────────────────────┐
    │                    메인 프로그램 실행                           │
    └─────────────────────┬───────────────────────────────────────────┘
                          │
                          ▼
    ┌─────────────────────────────────────────────────────────────────┐
    │  server_task = asyncio.create_task(server.start_server())     │
    │  ┌─────────────────────────────────────────────────────────────┐ │
    │  │              백그라운드에서 서버 실행 시작                  │ │
    │  │  async def start_server():                                 │ │
    │  │      async with websockets.serve(...):                     │ │
    │  │          await asyncio.Future()  ← 여기서 대기 중          │ │
    │  └─────────────────────────────────────────────────────────────┘ │
    └─────────────────────┬─────────────────────────────────────────┘
                          │
                          ▼
    ┌─────────────────────────────────────────────────────────────────┐
    │              클라이언트 테스트 실행                            │
    │  await demo_client_interactions()                             │
    │  await demo_multiple_clients()                               │
    └─────────────────────┬─────────────────────────────────────────┘
                          │
                          ▼
    ┌─────────────────────────────────────────────────────────────────┐
    │  [CANCEL] server_task.cancel() 호출                          │
    │  ┌─────────────────────────────────────────────────────────────┐ │
    │  │  1. 즉시 반환 (논블로킹)                                    │ │
    │  │  2. CancelledError를 server_task로 전송                    │ │
    │  │  3. 서버는 아직 실행 중 (await 지점까지 도달해야 중단)      │ │
    │  └─────────────────────────────────────────────────────────────┘ │
    └─────────────────────┬─────────────────────────────────────────┘
                          │
                          ▼
    ┌─────────────────────────────────────────────────────────────────┐
    │  [WAIT] await server_task (취소 완료 대기)                         │
    │  ┌─────────────────────────────────────────────────────────────┐ │
    │  │  서버 내부에서:                                                │
    │  │  await asyncio.Future() ← CancelledError 발생!             │ │
    │  │  ↓                                                        │ │
    │  │  except asyncio.CancelledError:                           │ │
    │  │      # 정리 작업 수행                                      │ │
    │  │      raise  # CancelledError 재발생                       │ │
    │  └─────────────────────────────────────────────────────────────┘ │
    └─────────────────────┬─────────────────────────────────────────┘
                          │
                          ▼
    ┌─────────────────────────────────────────────────────────────────┐
    │  [DONE] 취소 완료 처리                                         │
    │  ┌─────────────────────────────────────────────────────────────┐ │
    │  │  try:                                                      │ │
    │  │      await server_task                                     │ │
    │  │  except asyncio.CancelledError:                           │ │
    │  │      print("서버가 정상적으로 종료됨")                    │ │
    │  └─────────────────────────────────────────────────────────────────┘ │
    └─────────────────────┬─────────────────────────────────────────┘
                          │
                          ▼
    ┌─────────────────────────────────────────────────────────────────┐
    │  [END] 프로그램 정상 종료                                      │
    └─────────────────────────────────────────────────────────────────┘
    """
    )


def print_timing_diagram():
    """취소 타이밍 다이어그램"""

    print(
        """
    [TIMING] 취소 타이밍 상세 분석
    
    시간축: 0초 ────────────── 1초 ────────────── 2초 ────────────── 3초
    
    ┌─────────────────────────────────────────────────────────────────┐
    │  서버 태스크 실행                                               │
    │  ┌─────────────────────────────────────────────────────────────┐ │
    │  │  await asyncio.Future()  ← 여기서 대기 중                   │ │
    │  └─────────────────────────────────────────────────────────────┘ │
    └─────────────────────────────────────────────────────────────────┘
    
    ┌─────────────────────────────────────────────────────────────────┐
    │  클라이언트 테스트                                              │
    │  ┌─────────────────────────────────────────────────────────────┐ │
    │  │  demo_client_interactions()                               │ │
    │  │  demo_multiple_clients()                                 │ │
    │  └─────────────────────────────────────────────────────────────┘ │
    └─────────────────────────────────────────────────────────────────┘
    
    ┌─────────────────────────────────────────────────────────────────┐
    │  [CANCEL] cancel() 호출                                        │
    │  ┌─────────────────────────────────────────────────────────────┐ │
    │  │  CancelledError 전송 (즉시)                               │ │
    │  │  서버는 아직 실행 중                                      │ │
    │  └─────────────────────────────────────────────────────────────┘ │
    └─────────────────────────────────────────────────────────────────┘
    
    ┌─────────────────────────────────────────────────────────────────┐
    │  [WAIT] await server_task                                       │
    │  ┌─────────────────────────────────────────────────────────────┐ │
    │  │  서버에서 CancelledError 발생                              │ │
    │  │  정리 작업 수행                                            │ │
    │  │  CancelledError 재발생                                     │ │
    │  └─────────────────────────────────────────────────────────────────────────┘ │
    └─────────────────────────────────────────────────────────────────┘
    
    ┌─────────────────────────────────────────────────────────────────┐
    │  [DONE] 취소 완료                                              │
    │  ┌─────────────────────────────────────────────────────────────┐ │
    │  │  except asyncio.CancelledError:                           │ │
    │  │      print("정상 종료")                                    │ │
    │  └─────────────────────────────────────────────────────────────┘ │
    └─────────────────────────────────────────────────────────────────┘
    """
    )


def print_error_handling_diagram():
    """에러 처리 다이어그램"""

    print(
        """
    [ERROR] CancelledError 처리 메커니즘
    
    ┌─────────────────────────────────────────────────────────────────┐
    │  서버 태스크 내부                                               │
    └─────────────────────┬───────────────────────────────────────────┘
                          │
                          ▼
    ┌─────────────────────────────────────────────────────────────────┐
    │  try:                                                          │
    │      await asyncio.Future()  ← CancelledError 발생 지점        │
    │  except asyncio.CancelledError:                               │
    │      # 1. 정리 작업 수행                                       │
    │      await cleanup_resources()                                 │
    │      # 2. CancelledError 재발생 (중요!)                        │
    │      raise  # ← 이 부분이 핵심!                                │
    └─────────────────────┬───────────────────────────────────────────┘
                          │
                          ▼
    ┌─────────────────────────────────────────────────────────────────┐
    │  메인 프로그램에서                                              │
    └─────────────────────┬───────────────────────────────────────────┘
                          │
                          ▼
    ┌─────────────────────────────────────────────────────────────────┐
    │  try:                                                          │
    │      await server_task                                         │
    │  except asyncio.CancelledError:                               │
    │      print("[DONE] 서버가 정상적으로 종료됨")                  │
    │      # CancelledError는 정상적인 취소 신호                      │
    └─────────────────────────────────────────────────────────────────┘
    
    [IMPORTANT] 중요 포인트:
    1. CancelledError는 예외가 아닌 정상적인 취소 신호
    2. 서버에서 raise를 해야 메인에서 CancelledError를 받을 수 있음
    3. await server_task로 취소 완료를 기다려야 함
    """
    )


if __name__ == "__main__":
    print_cancel_flow_diagram()
    print_timing_diagram()
    print_error_handling_diagram()
